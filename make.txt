# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# include directories
INCLUDE_DIRS= ./include
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable: 
TARGET = zlib
LIBRARY = libzlib.a
SHARED_LIBRARY = libzlib.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libzlib.dylib
else 
	DYNAMIC_LIBRARY=
endif

# source files
SOURCE_FILES = adler32.o compress.o crc32.o deflate.o gzclose.o gzlib.o gzread.o gzwrite.o infback.o inffast.o inflate.o inftrees.o trees.o zutil.o

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_LIB_DIR)/$(LIBRARY)

$(SHARED_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/*.o

$(DYNAMIC_LIBRARY): $(SOURCE_FILES)
	$(CC) $(CFLAGS) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/*.o

$(LIBRARY): $(SOURCE_FILES)
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/*.o

adler32.o: src/adler32.c
	$(CC) $(CFLAGS) -c src/adler32.c -o $(OUTPUTS_DIR)/adler32.o

compress.o: src/compress.c
	$(CC) $(CFLAGS) -c src/compress.c -o $(OUTPUTS_DIR)/compress.o

crc32.o: src/crc32.c include/crc32.h
	$(CC) $(CFLAGS) -c src/crc32.c -o $(OUTPUTS_DIR)/crc32.o

deflate.o: src/deflate.c include/deflate.h
	$(CC) $(CFLAGS) -c src/deflate.c -o $(OUTPUTS_DIR)/deflate.o

gzclose.o: src/gzclose.c
	$(CC) $(CFLAGS) -c src/gzclose.c -o $(OUTPUTS_DIR)/gzclose.o

gzlib.o: src/gzlib.c
	$(CC) $(CFLAGS) -c src/gzlib.c -o $(OUTPUTS_DIR)/gzlib.o

gzread.o: src/gzread.c
	$(CC) $(CFLAGS) -c src/gzread.c -o $(OUTPUTS_DIR)/gzread.o

gzwrite.o: src/gzwrite.c
	$(CC) $(CFLAGS) -c src/gzwrite.c -o $(OUTPUTS_DIR)/gzwrite.o

infback.o: src/infback.c
	$(CC) $(CFLAGS) -c src/infback.c -o $(OUTPUTS_DIR)/infback.o

inffast.o: src/inffast.c include/inffast.h
	$(CC) $(CFLAGS) -c src/inffast.c -o $(OUTPUTS_DIR)/inffast.o

inflate.o: src/inflate.c include/inflate.h
	$(CC) $(CFLAGS) -c src/inflate.c -o $(OUTPUTS_DIR)/inflate.o

inftrees.o: src/inftrees.c include/inftrees.h
	$(CC) $(CFLAGS) -c src/inftrees.c -o $(OUTPUTS_DIR)/inftrees.o

trees.o: src/trees.c include/trees.h
	$(CC) $(CFLAGS) -c src/trees.c -o $(OUTPUTS_DIR)/trees.o

zutil.o: src/zutil.c include/zutil.h
	$(CC) $(CFLAGS) -c src/zutil.c -o $(OUTPUTS_DIR)/zutil.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)